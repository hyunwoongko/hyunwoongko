#!/usr/bin/env python
# coding: utf-8

# # 벡터란?

# ### 벡터란 무엇일까?
# ![](https://user-images.githubusercontent.com/38183241/103154327-1d99e680-47da-11eb-9b12-45a134c13616.png)
# 
# 선형대수의 기본 조각은 선형방정식, 바로 벡터라고 했다. 그래서 우리는 이 벡터가 무엇인지 아는 것이 굉장히 중요하다. 기본적으로 벡터를 생각하는 가장 일반적인 3가지의 관점이 존재한다. 바로 물리학, 컴퓨터과학, 수학이다.
# 
# 물릭학에게 벡터는 방향을 나타내는 물리량이다. 그들에게는 방향과 크기만 같으면 어디에 있던 같은 벡터이다. 컴퓨터과학에게 벡터는 순차리스트이다. 이들은 벡터를 이용하여 여러가지 데이터를 모델링한다. 수학에게는 벡터는 이들을 모두 포함하는 개념으로 `벡터 합`과 `스칼라 곱`이라는 개념이 성립하면 벡터이다. (추가적으로 항등원, 역원 조건 등 다양한 조건이 있지만 위의 벡터 합과 스칼라 곱이 훨씬 중요하다)

# ### 사실 이들은 모두 같은 것이다.
# 
# ![](https://user-images.githubusercontent.com/38183241/103154328-1e327d00-47da-11eb-85cf-acf8efecd78a.gif)
# 
# 선형대수에서 벡터를 이야기할 때 원점에 꼬리를 둔 화살표를 하나 생각하는 것이 좋다. 물리학 관점에서는 꼬리의 위치가 어디로든 움직일 수 있지만 선형대수에서는 대부분 원점에 꼬리를 둔다. 원점에 꼬리를 두고 그 화살표가 가리키는 그 지점(좌표)가 컴퓨터 사이언스 관점에서의 리스트였던 것이다. 이렇게 컴퓨터 사이언스 관점의 벡터와 물리학 관점의 벡터는 표현하는 방법만 다를뿐 사실은 동일한 것이다. 이 둘(수치적 / 기하학적)이 서로 번역될 수 있고, 이러한 과정에서 선형대수의 중요한 특징들이 드러난다. 또한 평범한 좌표인 $(1, 2)$과 벡터를 구분하기 위해서 관례적으로 $\begin{bmatrix} 1 \\ 2 \end{bmatrix}$와 같은 열벡터로 표기한다.
# 
# ![](https://user-images.githubusercontent.com/38183241/103154329-1e327d00-47da-11eb-8725-7811860e3604.gif)
# 
# 만약 $ \begin{bmatrix} 2 \\ 1 \\ 3 \end{bmatrix}$ 처럼 리스트의 원소가 3개라면 항이 3개인 벡터가 되는 것이고 이는 위처럼 기하학적으로 3차원 공간으로 확장된 화살표가 된다. (4차원 이상은 시각화가 어려움)

# ### 벡터의 두가지 기본연산 : 벡터합과 스칼라곱
# 
# #### 벡터 합 : 두 벡터를 이어 붙이기
# 
# ![](https://user-images.githubusercontent.com/38183241/103154330-1ecb1380-47da-11eb-81e6-7fd81de1d492.gif)
# 
# 기하학적인 개념에서 본다면 `벡터 합`은 벡터의 꼬리를 다른 벡터의 끝에 놓고 두 벡터를 잇는 새로운 벡터를 그리는 것과 동일하다. 즉, $\vec{v}$를 갔다가 $\vec{w}$를 가면 결과적으로 $\vec{v} + \vec{w}$이 간 곳과 동일한 좌표에 도달하게 된다. 컴퓨터 사이언스(수치적)관점에서는 벡터들이 지금까지 어떻게 연산되었는지에 관계 없이 $\vec{v} = \begin{bmatrix} 1 \\ 2 \end{bmatrix}$이고, $\vec{w} = \begin{bmatrix} 1 \\ 2 \end{bmatrix}$라면, 결과적으로  $\vec{v} = \vec{w}$이다. 따라서 두 벡터를 따라가서 도달한 끝지점을 가리키는 벡터가 있다면, 그 벡터가 두 벡터의 합이 된다.
# <br><br>
# 
# 
# ![](https://user-images.githubusercontent.com/38183241/103154331-1ecb1380-47da-11eb-9b15-755d67ea7479.gif)
# 
# 수치적인 관점에서 벡터의 합을 계산해본다면 각 차원(자리)의 값들을 더해주면 그 결과벡터가 된다. 즉, 1번째 원소끼리 더하고 2번째 원소끼리 더하고 n번째 원소끼리 더해서 출력된 벡터가 두 벡터의 합이 된다. 위처럼 x축으로 1만큼 가고 다시 2만큼 간 뒤에, y축으로 2만큼 올라갔다가 1만큼 내려온, 그 위치를 가리키는 벡터가 곧 두 벡터를 더한 벡터가 된다는 것이다.
# 
# ![](https://user-images.githubusercontent.com/38183241/103154332-1f63aa00-47da-11eb-96f0-6ea8b07245f2.png)
# 
# 1차원에서 생각해보자면 이는 수직선과 굉장히 비슷한 개념이다. 우리가 $2 + 3$을 생각할 때 0에서 오른쪽으로 2칸 이동하고 다시 오른쪽으로 3칸 이동한다. $4 - 2$를 생각할 땐 0에서 오른쪽으로 4칸 이동하고 왼쪽으로 2칸 이동한다. 방향이 더 추가되었을 뿐, 정수, 유리수와 같은 수들과 본질적으로 동일하다. 이렇게 기하학적인 의미에서 이해하는 것과 수치적으로 계산을 하는것 모두 유용하다. 기하학은 그 과정을 머릿속으로 이해하게 해주며 수치는 이들을 실제로 계산할 수 있는 방법을 제공한다.

# #### 스칼라 곱 : 벡터를 상수배 만큼 늘리거나 줄이기
# 
# ![](https://user-images.githubusercontent.com/38183241/103154333-1f63aa00-47da-11eb-9d6b-fc0a289dbd0e.gif)
# 
# ![](https://user-images.githubusercontent.com/38183241/103154324-1bd02300-47da-11eb-8af8-6f5c9f1f1d85.gif)
# 
# ![](https://user-images.githubusercontent.com/38183241/103154325-1d015000-47da-11eb-8916-d7dbeb915e85.gif)
# 
# 스칼라 곱은 벡터의 방향을 바꾸지 않고 그 크기만 상수배만큼 늘리거나 줄이는 것을 의미한다. 이런 과정을 Scaling이라고 부르고, 얼마만큼 조절하기 위한 숫자를 Scaler(스케일러 => 스칼라)라고 한다. 물론 음수를 곱하게 되면 방향이 뒤바뀌게 되지만 절대적으로 유지되는 것은 $x$와 $y$가 어떤 관계에 있는지는 유지된다. $\begin{bmatrix} 1 \\ 2 \end{bmatrix}$에 -3을 곱해서 $\begin{bmatrix} -3 \\ -6 \end{bmatrix}$이 된다고 해도 $x$와 $y$는 그대로 3배 만큼 차이난다. 이는 기하학적으로 볼 때 하나의 직선상에서 벗어나지 않는 범위에서 움직이는 것을 의미한다. ($y = \frac{1}{2}x$를 벗어나지 않는다)
# 
# ![](https://user-images.githubusercontent.com/38183241/103154332-1f63aa00-47da-11eb-96f0-6ea8b07245f2.png)
# 
# 스칼라 곱도 마찬가지로 수직선에서 생각해도 역시 동일하다. 숫자 2가 오른쪽으로 두칸 이동한 것이라면 이 것을 2배만큼 늘려서 4까지 이동시킬 수도 있고 길이를 -3만큼 곱해서 -6까지 이동시키는 것도 역시 가능하다. 대신 벡터의 경우는 방향이 더 추가된 것 뿐. 본질은 동일하다. 
# 
# ![](https://user-images.githubusercontent.com/38183241/103154326-1d99e680-47da-11eb-8aaa-2d2716b567c4.gif)
# 
# 스칼라 곱을 계산할 때는 벡터의 모든 차원에 해당 스케일러(스칼라)를 곱해주기만 하면 된다. 위의 예시처럼 $2 \times \begin{bmatrix} 3 \\ 1 \end{bmatrix}$라면 모든 차원 (3, 1)에 각각 2를 곱해서 $\begin{bmatrix} 6 \\ 2 \end{bmatrix}$가 된다.<br><br>
#  
# > 앞으로 이야기 하겠지만 선형대수는 위의 두가지 연산에서만 도는 경향이 있다. 선형대수에서 다루는 시스템인 선형방정식이 바로 `선형성`을 유지해야하기 때문이다. (제곱하거나 루트를 씌우거나 미적분을 하거나 하면 선형성이 깨져버린다) 딱 더한만큼만 더해지고, 딱 곱한만큼만 곱해진 시스템만 다루기 때문에 `벡터 합`과 `스칼라 곱`. 이 두가지 연산이 가장 중요하다.

# ### Reference
# > https://youtu.be/fNk_zzaMoSs
# 
